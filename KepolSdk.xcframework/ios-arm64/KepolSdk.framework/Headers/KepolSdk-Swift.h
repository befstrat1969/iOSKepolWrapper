#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef KEPOLSDK_SWIFT_H
#define KEPOLSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KepolSdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
enum PickupType : int32_t;

/// Model of PickupParcel
SWIFT_CLASS("_TtC8KepolSdk26AvailablePickupParcelModel")
@interface AvailablePickupParcelModel : NSObject
/// IdentCode
@property (nonatomic, readonly, copy) NSString * _Nonnull IdentCode;
/// BoxNumber
@property (nonatomic, readonly) int32_t BoxNumber;
/// PickupType
@property (nonatomic, readonly) enum PickupType PickUpType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, PickupType, open) {
  PickupTypeFIRST_MILE = 0,
  PickupTypeEXPIRED = 1,
  PickupTypeREJECTED = 2,
  PickupTypeUNKNOWN = 3,
};


/// Configuration for KePol APP backend settings. Enables usage of different kePol APP backend Environments. (productive or integration)
SWIFT_CLASS("_TtC8KepolSdk13BackendConfig")
@interface BackendConfig : NSObject
/// URL of the backend
/// E.g.: https://xyz.com/
@property (nonatomic, readonly, copy) NSString * _Nonnull Host;
/// Apiversion of the backend
/// E.g.: api/v2
@property (nonatomic, readonly, copy) NSString * _Nonnull ApiVersion;
/// Optional switch for backend environment
/// added to header as x-env
/// Specify the header –> for feature branch (Zusätzl. Headerinfo für einen bestimmten Featurebranch)
@property (nonatomic, readonly, copy) NSString * _Nonnull Environment;
/// Constructor for custom host only
/// \code
/// - parameter host: custom host address
/// - returns: -
/// - warning: -
///
/// \endcode
- (nonnull instancetype)init:(NSString * _Nonnull)host OBJC_DESIGNATED_INITIALIZER;
/// Constructor for fully customized BackendConfig
/// \param host custom host address.
///
/// \param apiLevel custom api level.
///
/// \param environment custom environment setting.
///
- (nonnull instancetype)init:(NSString * _Nonnull)host :(NSString * _Nonnull)apiVersion :(NSString * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)GetBaseURL SWIFT_WARN_UNUSED_RESULT;
/// Kepol APP productive environment config
/// - returns: KePol APP productive environment config.
+ (BackendConfig * _Nonnull)GetProductiveKepolCloudConfig SWIFT_WARN_UNUSED_RESULT;
+ (BackendConfig * _Nonnull)GetStagingKepolCloudConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;
@class CBService;
@class CBCharacteristic;

/// Singleton class of BLE
/// Contains the communication between SDK and Locker via Bluetooth.
SWIFT_CLASS("_TtC8KepolSdk13BleController")
@interface BleController : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This function will be called every time the state of Bluetooth on this system changes and sets the state in @ViewControllerApi to
/// \code
/// - parameter: -
/// - returns: -
/// - warning: -
///
/// \endcode
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
/// Searches within the Scanresults for KEBA-Locker
/// \code
/// - parameter: -
/// - returns: -
/// - warning: -
///
/// \endcode
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC8KepolSdk9BleHelper")
@interface BleHelper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Model of BoxSize
SWIFT_CLASS("_TtC8KepolSdk12BoxSizeModel")
@interface BoxSizeModel : NSObject
/// HardwareId
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// BoxSize
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull Sizes;
/// Size
@property (nonatomic, readonly, copy) NSString * _Nonnull AnnouncementSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum BoxState : int32_t;
enum MessageType : int32_t;

/// Model representing a state of a box
SWIFT_CLASS("_TtC8KepolSdk14BoxStatusModel")
@interface BoxStatusModel : NSObject
/// Id of a box
@property (nonatomic, readonly) int32_t Id;
/// True if box is in an error state.
@property (nonatomic, readonly) BOOL Error;
/// True if box is in burglary state.
@property (nonatomic, readonly) BOOL Burglary;
/// True if box is in recovery state.
@property (nonatomic, readonly) BOOL Recovery;
/// State of a box
@property (nonatomic, readonly) enum BoxState State;
/// Number of a Box
@property (nonatomic, readonly) int32_t BoxNumber;
/// HardwareId of Locker the box is a part of
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Enum of MessageType
@property (nonatomic, readonly) enum MessageType MessageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, BoxState, open) {
  BoxStateUnknown = 0,
  BoxStateOpening = 1,
  BoxStateOpen = 2,
  BoxStateClosed = 3,
  BoxStateError = 4,
  BoxStateDisabled = 5,
  BoxStateSecured = 6,
};

@class PickupCodeFeedbackModel;

/// Model representing the SetPickupCodeModel.
SWIFT_CLASS("_TtC8KepolSdk28ClearPickupCodeResponseModel")
@interface ClearPickupCodeResponseModel : NSObject
/// PickupCodeFeedbackModel
@property (nonatomic, readonly, copy) NSArray<PickupCodeFeedbackModel *> * _Nonnull Result;
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Enum of MessageType
@property (nonatomic, readonly) enum MessageType MessageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8KepolSdk17ControllerManager")
@interface ControllerManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Model of Delivery
SWIFT_CLASS("_TtC8KepolSdk13DeliveryModel")
@interface DeliveryModel : NSObject
/// IdentCode
@property (nonatomic, readonly, copy) NSString * _Nonnull IdentCode;
/// BoxNumber
@property (nonatomic, readonly) NSInteger BoxNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of Delivery Response
SWIFT_CLASS("_TtC8KepolSdk21DeliveryResponseModel")
@interface DeliveryResponseModel : NSObject
/// HardwareId
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// IdentCode
@property (nonatomic, readonly, copy) NSString * _Nonnull IdentCode;
/// BoxNumber
@property (nonatomic, readonly) NSInteger BoxNumber;
/// Payload
@property (nonatomic, readonly, copy) NSString * _Nonnull Payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the feedback.
SWIFT_CLASS("_TtC8KepolSdk13FeedbackModel")
@interface FeedbackModel : NSObject
/// Result: 00 = success, 01 = Failed
@property (nonatomic, readonly) NSInteger Result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the firmware information of a locker
SWIFT_CLASS("_TtC8KepolSdk13FirmwareModel")
@interface FirmwareModel : NSObject
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull Name;
/// Id
@property (nonatomic, readonly) NSInteger Id;
/// ModuleData
@property (nonatomic, readonly, copy) NSString * _Nonnull ModuleData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PickupCodeStatus : int32_t;

/// Model representing the PickupCodeFeedbackModel.
SWIFT_CLASS("_TtC8KepolSdk27GetPickupCodeStatusBoxModel")
@interface GetPickupCodeStatusBoxModel : NSObject
/// BoxNumber
@property (nonatomic, readonly) int32_t BoxNumber;
/// Result
@property (nonatomic, readonly) enum PickupCodeStatus Result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// PickupCodeFeedback
typedef SWIFT_ENUM(int32_t, PickupCodeStatus, open) {
  PickupCodeStatusCLEAR = 0,
  PickupCodeStatusSET = 1,
  PickupCodeStatusUSED = 2,
  PickupCodeStatusPICKED_UP = 3,
  PickupCodeStatusPICKUP_FAILED = 4,
  PickupCodeStatusERROR = 5,
  PickupCodeStatusNONE = 6,
};

@class KepolLockerModel;
@class ProblemDetails;
@class OpenBoxesModel;

/// Interface can be referenced by using KepolSdk.GetKepolAPI(optional: BackendConfig).
/// Includes most needed functions managing a Kepol locker.
SWIFT_PROTOCOL_NAMED("IKepolCommonApi")
@protocol IKepolCommonApi
/// Search for all lockers in range.
/// important:
/// Following callbacks are needed for this command: OnKepolLockerSearchFound, OnKepolLockerSearchFinished, OnKepolLockerSearchFailed
/// \param DurationSec duration time in ms the scan should last.
///
///
/// returns:
/// true if request is accepted.
- (BOOL)FindLocker:(uint32_t)DurationSec SWIFT_WARN_UNUSED_RESULT;
/// Stop searching for lockers and returns a list of all available lockers.
///
/// returns:
/// Current result of the scan: Array of KepolLockerModel object.
- (void)StopSearch;
/// Tries to connect to a Kepol locker that was defned when calling KepolSdk.GetKepolAPI(Backendconfig). Hint: call it after OnKepolLockerSearchFinished
/// important:
/// Following callbacks are needed for this command: OnConnectionEstablished, OnConnectionEstablishedFailed, OnConnectionClosedBle
/// \param kepolLocker A KepolLockerModel with all necessary locker information.
///
///
/// returns:
/// true if request is accepted.
- (BOOL)Connect:(KepolLockerModel * _Nonnull)kepolLocker SWIFT_WARN_UNUSED_RESULT;
/// Checks connection state to locker
///
/// returns:
/// true if there is connection to locker.
- (BOOL)IsConnected SWIFT_WARN_UNUSED_RESULT;
/// Tries to disconnect from a connected Kepol locker.
/// important:
/// Following callbacks are needed for this command: OnConnectionClosed, OnConnectionClosedFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)Disconnect SWIFT_WARN_UNUSED_RESULT;
/// Sets the current Kepol Cloud token.
/// \param token a valid Kepol Cloud token.
///
- (void)SetToken:(NSString * _Nonnull)token;
/// Updates the current Kepol Cloud token.
/// \param accessToken a valid Kepol Cloud token.
///
- (void)UpdateToken:(NSString * _Nonnull)accessToken;
/// Checks if Bluetooth is en-/disabled.
///
/// returns:
/// State of Bluetooth: unauthorized, unsupported, unknown, resetting, Off, On
- (NSString * _Nonnull)CheckBluetoothEnabled SWIFT_WARN_UNUSED_RESULT;
/// Open one or more boxes.
/// important:
/// Following callbacks are needed for this command: OnBoxOpenedFinished, OnBoxOpenedFailed
/// \param boxnumbers Ids of boxes to be opened.
///
///
/// returns:
/// true if request is accepted.
- (BOOL)OpenBoxes:(NSArray<NSNumber *> * _Nonnull)boxNumbers SWIFT_WARN_UNUSED_RESULT;
/// Get status of all boxes.
/// important:
/// Following callbacks are needed for this command: OnBoxesStatusReceived, OnBoxesStatusFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)GetBoxesStatus SWIFT_WARN_UNUSED_RESULT;
/// Ping makes sure to keep the connection with connected Locker
/// important:
/// Following callbacks are needed for this command: OnPingFailed, OnRunningTimeoutSoon
///
/// returns:
/// true if request is accepted.
- (BOOL)Ping SWIFT_WARN_UNUSED_RESULT;
/// PickupCode calls still might fail due to technical issues but locker at least fulfills all preconditions.
///
/// returns:
/// true if pickupCode calls are supported.
- (BOOL)IsPickupCodeFeatureSupported SWIFT_WARN_UNUSED_RESULT;
/// A Kepol locker was found. Whenever a new locker is found during a scan this method is called.
/// <ul>
///   <li>
///     Parameters:
///     - Array of KepolLockerModel: Curent result of the scan.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnKepolLockerSearchFound)(NSArray<KepolLockerModel *> * _Nonnull);
/// Something went wrong during locker search.
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnKepolLockerSearchFailed)(ProblemDetails * _Nonnull);
/// Connection to the Kepol locker ist established.
@property (nonatomic, copy) void (^ _Nullable OnConnectionEstablished)(NSString * _Nonnull);
/// Connection to Kepol locker was closed.
///
/// returns:
/// Errorcode
@property (nonatomic, copy) void (^ _Nullable OnConnectionClosed)(NSInteger);
/// Connection to Kepol locker was closed with a failure.
///
/// returns:
/// Errorcode and Description of error (if available)
@property (nonatomic, copy) void (^ _Nullable OnConnectionClosedFailed)(ProblemDetails * _Nonnull);
/// Connection to Kepol locker was closed.
///
/// returns:
/// Errorcode
@property (nonatomic, copy) void (^ _Nullable OnConnectionClosedBle)(ProblemDetails * _Nonnull);
/// Connection to the locker failed .
/// <ul>
///   <li>
///     Parameters: Error messsage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnConnectionEstablishedFailed)(ProblemDetails * _Nonnull);
/// Scanning is stopped after exceeded duration time or if it’s stopped manually .
@property (nonatomic, copy) void (^ _Nullable OnKepolLockerSearchFinished)(NSArray<KepolLockerModel *> * _Nonnull);
/// Callback on the successful openbox request
/// <ul>
///   <li>
///     Parameters: result (OpenBoxesModel)
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnBoxOpenedFinished)(OpenBoxesModel * _Nonnull);
/// Callback on failed open-box request .
/// <ul>
///   <li>
///     Parameters: actionFailed: Error messsage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnBoxOpenedFailed)(ProblemDetails * _Nonnull);
/// Callback on successful boxes-status request.
/// \param boxStatusModel result of boxes-status request - array of BoxStatusModel
///
/// \param boxStatusChangeOnLocker 
/// False: if Boxstatus is changed via Userinteraction e.g. OpenBoxes, True: Boxstatus is changed due to user action on locker e.g. Close Box
///
@property (nonatomic, copy) void (^ _Nullable OnBoxesStatusReceived)(NSArray<BoxStatusModel *> * _Nonnull, BOOL);
/// Callback on failed boxes-status request.
/// <ul>
///   <li>
///     Parameters: Error messsage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnBoxesStatusFailed)(ProblemDetails * _Nonnull);
/// Callback on failed Ping
/// - returns: Error message
/// - warning: Connection to locker will be closed soon; Retry Ping to prevent that from happening
@property (nonatomic, copy) void (^ _Nullable OnPingFailed)(NSString * _Nonnull);
/// Callback to Warn of possicble Connection Timeout with Locker
@property (nonatomic, copy) void (^ _Nullable OnRunningTimeoutSoon)(void);
@end

@class SetPickupCodeModel;
@class SetPickupCodeResponseModel;
@class StatusPickupCodeResponseModel;

/// Interface can be referenced by using KepolSdk.GetKepolAPI(optional: BackendConfig).
/// Includes most needed functions managing a Kepol locker.
SWIFT_PROTOCOL_NAMED("IKepolAPI")
@protocol IKepolApi <IKepolCommonApi>
/// Set pickup codes for boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnSetPickupCodesSuccess(SetPickupCodeResponseModel), OnSetPickupCodesFailed
/// \param pickupCodes pickupCodes to be set on locker.
///
/// \param boxId Number of Box
///
- (BOOL)SetPickupCodes:(NSArray<SetPickupCodeModel *> * _Nonnull)pickupCodes SWIFT_WARN_UNUSED_RESULT;
/// Clear pickup codes for boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnClearPickupCodesSuccess, OnClearPickupCodesFailed
/// \param boxNumbers boxes which should be cleared on locker.
///
/// \param boxId Number of Box
///
- (BOOL)ClearPickupCodes:(NSArray<NSNumber *> * _Nonnull)boxNumbers SWIFT_WARN_UNUSED_RESULT;
/// Clear ALL pickup codes for boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnClearPickupCodesSuccess, OnClearPickupCodesFailed
- (BOOL)ClearAllPickupCodes SWIFT_WARN_UNUSED_RESULT;
/// Get status from boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnGetPickupCodesStatusSuccess, OnGetPickupCodesStatusFailed
/// \param boxNumbers status of boxes on locker.
///
- (BOOL)GetPickupCodeStatus:(NSArray<NSNumber *> * _Nonnull)boxNumbers SWIFT_WARN_UNUSED_RESULT;
/// Get status from boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnGetPickupCodesStatusSuccess, OnGetPickupCodesStatusFailed
/// \param boxNumbers status of boxes on locker.
///
/// \param filter Set filter to get boxes with specifig status (Clear, Set, Pickedup, etc.)
///
- (BOOL)GetPickupCodeStatus:(NSArray<NSNumber *> * _Nonnull)boxNumbers :(enum PickupCodeStatus)filter SWIFT_WARN_UNUSED_RESULT;
/// Set PickupCodes successfully
/// <ul>
///   <li>
///     Parameters:
///     - result: SetPickupCodeResponseModel  with hardwareId, type and feedback
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesSuccess)(SetPickupCodeResponseModel * _Nonnull);
/// Set PickupCodes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesFailed)(ProblemDetails * _Nonnull);
/// Clear PickupCodes successfully
/// <ul>
///   <li>
///     Parameters:
///     - result: ClearPickupCodeResponseModel with boxnumber and feedback
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnClearPickupCodesSuccess)(ClearPickupCodeResponseModel * _Nonnull);
/// Clear PickupCodes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnClearPickupCodesFailed)(ProblemDetails * _Nonnull);
/// Get PickupCodeStatus successfully
/// <ul>
///   <li>
///     Parameters:
///     - result: ClearPickupCodeResponseModel with boxnumber and feedback
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetPickupCodesStatusSuccess)(StatusPickupCodeResponseModel * _Nonnull);
/// Get PickupCodeStatus failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetPickupCodesStatusFailed)(ProblemDetails * _Nonnull);
@end


@class KepolRegisteredAgent;
@class KepolParameters;
@class SetPickupCodeWithIdentCodeModel;
@class PickupParcelModel;

/// Interface supporting parcel delivery use case with KePol managed lockers.
SWIFT_PROTOCOL_NAMED("IKepolDeliveryPickupAPI")
@protocol IKepolDeliveryPickupAPI <IKepolCommonApi>
/// Sets the current Kepol Cloud tenantId.
/// \param tenantId a valid tenantId.
///
- (void)SetTenantId:(NSString * _Nonnull)tenantId;
/// Providing a valid token connecting and communicating to locker.
/// important:
/// Following callbacks are needed for this command: OnTokenReceived, OnTokenFailed
/// \param lockerId Id of locker.
///
/// \param tenantId Id of customer/company (e.g. DHL,…)
///
///
/// returns:
/// true if request is accepted.
- (BOOL)GetDeliveryToken:(NSString * _Nonnull)lockerId :(NSString * _Nonnull)tenantId SWIFT_WARN_UNUSED_RESULT;
/// Providing a valid token connecting and communicating to locker.
/// important:
/// Following callbacks are needed for this command: OnTokenWithPrivilegesReceived, OnTokenWithPrivilegesFailed
/// \param tenantId Id of customer/company (e.g. DHL,…)
///
/// \param userName Username
///
/// \param pin Pin
///
///
/// returns:
/// true if request is accepted.
- (BOOL)GetDeliveryToken:(NSString * _Nonnull)tenantId :(NSString * _Nonnull)userName :(NSString * _Nonnull)pin SWIFT_WARN_UNUSED_RESULT;
/// Refresh a valid token for communicating to locker. Not all data are updated, only Tokens and Expirationtimes
/// important:
/// Not all data are updated, only Tokens and Expirationtimes. Following callbacks are needed for this command: OnTokenWithPrivilegesReceived, OnTokenWithPrivilegesFailed
/// \param agent KepolRegisteredAgent
///
///
/// returns:
/// true if request is accepted.
- (BOOL)RefreshDeliveryToken:(KepolRegisteredAgent * _Nonnull)agent SWIFT_WARN_UNUSED_RESULT;
/// Providing a valid parcel identCode and box size a box for delivery will open.
/// important:
/// Following callbacks are needed for this command: OnDeliveryParcelFinished, OnDeliveryParcelFailed
/// \param identCode valid parcel code.
///
/// \param BoxSizeModel requested box size
///
///
/// returns:
/// true if request is accepted.
- (BOOL)DeliverParcel:(NSString * _Nonnull)identCode :(NSString * _Nonnull)size SWIFT_WARN_UNUSED_RESULT;
/// Getting available box sizes for deliver parcel.
/// important:
/// Following callbacks are needed for this command: OnAvailableBoxSizesFinished, OnAvailableBoxSizesFailed
/// \param identCode valid parcel code.
///
///
/// returns:
/// true if request is accepted.
- (BOOL)GetAvailableBoxSizes:(NSString * _Nonnull)identCode SWIFT_WARN_UNUSED_RESULT;
/// Set box condition.
/// important:
/// Following callbacks are needed for this command: OnSetBoxConditionSuccess, OnSetBoxConditionFailed
/// \param identCode valid parcel code.
///
/// \param boxNumber Number of Box
///
/// \param soiled True if a box is soiled
///
/// \param defect True if a box has a defect
///
- (void)SetBoxCondition:(NSString * _Nonnull)identCode :(NSInteger)boxNumber :(BOOL)soiled :(BOOL)defect;
/// (Deprecated since 1.2.0) Confirm that parcel with stampt/identCode was deposited in boxNumber.
/// important:
/// Following callbacks are needed for this command: OnConfirmDeliverySuccess, OnConfirmDeliverySuccess
/// \param identCode valid parcel code.
///
/// \param boxId Number of Box
///
- (void)ConfirmDelivery:(NSString * _Nonnull)identCode :(NSInteger)boxId;
/// Confirm that parcel with stampt/identCode was deposited in boxNumber.
/// important:
/// Following callbacks are needed for this command: OnConfirmDeliverySuccess, OnConfirmDeliverySuccess
/// \param identCode valid parcel code.
///
/// \param boxId Number of Box
///
/// \param pickupCodeSet set to true if ’SetPickupCodes” was executed successfully before
///
- (void)ConfirmDelivery:(NSString * _Nonnull)identCode :(NSInteger)boxId :(BOOL)pickupCodeSet;
/// Providing a valid token connecting and communicating to locker.
/// important:
/// Following callbacks are needed for this command: OnTokenReceived, OnTokenFailed
/// \param lockerId Id of locker.
///
/// \param tenantId Id of customer/company (e.g. DHL,…)
///
///
/// returns:
/// true if request is accepted.
- (BOOL)GetPickupToken:(NSString * _Nonnull)lockerId :(NSString * _Nonnull)tenantId SWIFT_WARN_UNUSED_RESULT;
/// Pickup a parcel from the locker.
/// important:
/// Following callbacks are needed for this command: OnPickupParcelSuccess, OnPickupParcelFailed
/// \param pickupCode 
///
///
/// returns:
/// true if request is accepted.
- (BOOL)PickupParcel:(NSString * _Nonnull)pickupCode SWIFT_WARN_UNUSED_RESULT;
/// Confirm Pickup of a parcel from the locker.
/// important:
/// Following callbacks are needed for this command: OnConfirmPickupSuccess, OnConfirmPickupFailed
/// \param pickupCode 
///
/// \param boxNumber Number of Box
///
///
/// returns:
/// true if request is accepted.
- (void)ConfirmPickupParcel:(NSString * _Nonnull)pickupCode :(NSInteger)boxNumber;
/// Confirm Pickup of a parcel from the locker by the delivery agend
/// Permission kepol.deliveryagent.confirmparcelpickup is needed.
/// Delivery agent should additionally have at least one of the following permissions:
/// - expired, firstmile, rejected
/// important:
/// Following callbacks are needed for this command: OnConfirmPickupSuccess, OnConfirmPickupFailed
/// \param pickupCode Pickupcode
///
/// \param boxNumber Number of Box
///
///
/// returns:
/// true if request is accepted.
- (void)ConfirmPickupParcel:(AvailablePickupParcelModel * _Nonnull)parcel;
/// Get available Pickups/Parcels.
/// important:
/// Following callbacks are needed for this command: OnAvailablePickupsFinished, OnAvailablePickupsFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)GetAvailablePickups SWIFT_WARN_UNUSED_RESULT;
/// Pickup Parcels.
/// important:
/// Following callbacks are needed for this command: OnPickupParcelsSuccess, OnPickupParcelsFailed
/// \param parcels List of parcels from Type PickupParcelModel
///
///
/// returns:
/// true if request is accepted.
- (BOOL)PickupParcels:(NSArray<AvailablePickupParcelModel *> * _Nonnull)parcels SWIFT_WARN_UNUSED_RESULT;
/// Providing a valid parcel identCode and box size a box for first mile delivery will open.
/// important:
/// Following callbacks are needed for this command: OnDeliveryParcelFinished, OnDeliveryParcelFailed
/// \param parcelReturnCode valid parcel code.
///
/// \param BoxSizeModel requested box size
///
///
/// returns:
/// true if request is accepted.
- (BOOL)DeliverParcelFirstMile:(NSString * _Nonnull)parcelReturnCode :(NSString * _Nonnull)size SWIFT_WARN_UNUSED_RESULT;
/// Getting available box sizes for parcel first mile delivery.
/// important:
/// Following callbacks are needed for this command: OnAvailableBoxSizesFinished, OnAvailableBoxSizesFailed
/// \param parcelReturnCode valid parcel code.
///
///
/// returns:
/// true if request is accepted.
- (BOOL)GetAvailableBoxSizesFirstMile:(NSString * _Nonnull)parcelReturnCode SWIFT_WARN_UNUSED_RESULT;
/// Confirm that parcel with stampt/identCode was deposited in boxNumber as first mile delivery.
/// important:
/// Following callbacks are needed for this command: OnConfirmDeliverySuccess, OnConfirmDeliveryFailed
/// \param parcelReturnCode valid parcel code.
///
/// \param boxId Number of Box
///
- (void)ConfirmDeliveryFirstMile:(NSString * _Nonnull)parcelReturnCode :(NSInteger)boxId;
/// Confirm that parcel with stampt/identCode was deposited in boxNumber as first mile delivery.
/// important:
/// Following callbacks are needed for this command: OnConfirmDeliverySuccess, OnConfirmDeliveryFailed. In case an receipt should be sent vail mail at successful delivery, you have to add a KepolParameter with key “EMAIL” and a valid email address as value.
/// \param parcelReturnCode valid parcel code.
///
/// \param boxId Number of Box
///
/// \param parameters KepolParameters (optional parameters, e.g. email)
///
- (void)ConfirmDeliveryFirstMile:(NSString * _Nonnull)parcelReturnCode :(NSInteger)boxId :(KepolParameters * _Nonnull)parameters;
/// Set pickup codes with Identcode for boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnSetPickupCodesSuccess(), OnSetPickupCodesFailed
/// \param data pickupCodes to be set on locker. Array of SetPickupCodeWithIdentCodeModel (boxNumber, Identcode)
///
- (BOOL)SetPickupCodesWithIdentCode:(NSArray<SetPickupCodeWithIdentCodeModel *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Sync pickup codes for boxes on locker with HMI/pin pad
/// important:
/// Following callbacks are needed for this command: OnSyncPickupCodesWithIdentCodeSuccess(), OnSyncPickupCodesWithIdentCodeFailed
- (BOOL)SyncPickupCodes SWIFT_WARN_UNUSED_RESULT;
/// Confirm that parcel with stampt/identCode was deposited in boxNumber as first mile delivery. ConfirmDelivery is always executed regardless of whether setpickupcode was successful or not.
/// important:
/// Following callbacks are needed for this command: OnConfirmDeliverySuccess, OnConfirmDeliveryFailed
/// \param identCode valid parcel code.
///
/// \param boxId Number of Box
///
- (BOOL)ConfirmDeliveryAndSetPickupCode:(NSString * _Nonnull)identCode :(NSInteger)boxId SWIFT_WARN_UNUSED_RESULT;
/// Getting a valid token for locker connection and communication.
/// <ul>
///   <li>
///     Parameters:
///     - deliveryToken: a valid token.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnTokenReceived)(NSString * _Nonnull);
/// Getting a valid token failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnTokenFailed)(ProblemDetails * _Nonnull);
/// Getting a valid token with privileges for locker connection and communication.
/// <ul>
///   <li>
///     Parameters:
///     - kepolRegisteredAgent: contains information about Accesstoken, Refreshtoken, UserId and Privileges.
///     -   Privileges:
///     allowBoxSetSoiled - ability to set a box state to soiled
///     allowBoxSetDefect - ability to set a box state to defect
///     CheckBoxes - ability to use process: checkboxes
///     allowSinglePickup (show a list of all parcels for pick up and select only one) - ability to do single pick ups in process DeliveryAgentPickUp; The app gives a list of parcels ready for pickup, and the delivery agent can choose which to take;
///     allowBoxOpen - used in process Checkboxes; ability to open a box outside of a pickup/delivery use case
///     DeliveryAgentPickUp - ability to use process: DeliveryAgentPickUp; Allows a delivery agent to pickup first mile, expired or stopped parcels;
///     DeliveryAgentSingleLoad (deliver announced parcels) - ability to do ‘bulk’ deliveries
///     confirmParcelDelivery - if present, the agent has to manually confirm each delivery;
///     Force2CloseBox - ability to use process: force2Close
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnTokenWithPrivilegesReceived)(KepolRegisteredAgent * _Nonnull);
/// Getting a valid token failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnTokenWithPrivilegesFailed)(ProblemDetails * _Nonnull);
/// Getting available box sizes
/// <ul>
///   <li>
///     Parameters:
///     - boxSizeModel: Array of BoxSizeModel
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnAvailableBoxSizesFinished)(BoxSizeModel * _Nonnull);
/// Getting available box sizes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnAvailableBoxSizesFailed)(ProblemDetails * _Nonnull);
/// Deliver parcel
/// <ul>
///   <li>
///     Parameters:
///     - delivery: Getting the delivery Model
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnDeliveryParcelFinished)(DeliveryModel * _Nonnull);
/// Delivery parcel failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnDeliveryParcelFailed)(ProblemDetails * _Nonnull);
/// Pickup parcel
/// <ul>
///   <li>
///     Parameters:
///     - result: Getting a PickupParcelModel
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelSuccess)(PickupParcelModel * _Nonnull);
/// Pickup parcel failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelFailed)(ProblemDetails * _Nonnull);
/// Getting available boxes
/// <ul>
///   <li>
///     Parameters:
///     - availablePickupParcelModel: Array of available Boxes
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnAvailablePickupsFinished)(NSArray<AvailablePickupParcelModel *> * _Nonnull);
/// Getting available boxes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnAvailablePickupsFailed)(ProblemDetails * _Nonnull);
/// Pickup parcels successfully
/// <ul>
///   <li>
///     Parameters:
///     - availablePickupParcelModel: Array of available Boxes
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelsSuccess)(NSArray<AvailablePickupParcelModel *> * _Nonnull);
/// Pickup boxes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelsFailed)(ProblemDetails * _Nonnull);
/// Confirm Delivery failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnConfirmDeliveryFailed)(ProblemDetails * _Nonnull);
/// Confirm Delivery successfully
/// <ul>
///   <li>
///     Parameters:
///     - identCode: valid parcel code.
///     - boxId: Number of Box
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnConfirmDeliverySuccess)(NSString * _Nonnull, NSInteger);
/// Confirm Pickup successfully
/// <ul>
///   <li>
///     Parameters:
///     - pickupCode: valid pickup code.
///     - boxId: Number of Box
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnConfirmPickupSuccess)(NSString * _Nonnull, NSInteger);
/// Confirm Pickup failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnConfirmPickupFailed)(ProblemDetails * _Nonnull);
/// Set BoxCondition successfully
/// <ul>
///   <li>
///     Parameters:
///     - boxNumber: number of Boxes
///     - soilded: true if box is soiled
///     - defect: true if box is defect
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetBoxConditionSuccess)(NSInteger, BOOL, BOOL);
/// Set Box Condition failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetBoxConditionFailed)(ProblemDetails * _Nonnull);
/// Set PickupCodes (Gateway variant) successfully
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesWithIdentCodeSuccess)(void);
/// Set PickupCodes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesWithIdentCodeFailed)(ProblemDetails * _Nonnull);
/// Sync PickupCodes (Gateway variant) successfully
@property (nonatomic, copy) void (^ _Nullable OnSyncPickupCodesSuccess)(void);
/// Sync PickupCodes failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSyncPickupCodesFailed)(ProblemDetails * _Nonnull);
@end

@class RemoteActionsModel;
@class LockerPropertyModel;
@class VersionInfoModel;
@class LockerModuleVersionInfosModel;
@class LogFileSyncUpdate;
@class LockerComponentsModel;
@class LockerFeaturesModel;

/// Interface can be referenced by using KepolSdk.GetKepolServiceAPI(optional: BackendConfig).
/// Includes most needed functions managing a Kepol locker.
/// You need special privileges to use this API interface.
SWIFT_PROTOCOL_NAMED("IKepolServiceAPI")
@protocol IKepolServiceAPI <IKepolApi>
/// Get current Information from the locker.
/// important:
/// Following callbacks are needed for this command: OnLockerInfoReceived, OnLockerInfoFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)GetLockerInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the VersionInfo of a given FirmwareModel
/// important:
/// Following callbacks are needed for this command: OnModuleVersionInfoReceived, OnModuleVersionInfoFailed
/// \param fwModel FirmwareModel to get Version Info fom.
///
///
/// returns:
/// true if request ist accepted
- (BOOL)GetVersionInfo:(FirmwareModel * _Nonnull)fwModel SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Callback will be deleted in upcoming Release; Use new func GetAllModulesVersionInfo");
/// Gets all Versions from Modules that are built in locker
/// important:
/// Following callbacks are needed for this command: OnModuleVersionInfosReceived, OnModuleVersionInfosFailed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     locker: LockerModel
///   </li>
/// </ul>
///
/// returns:
/// true if request is accepted
- (BOOL)GetAllModulesVersionInfo SWIFT_WARN_UNUSED_RESULT;
/// Get current status from the locker.
/// important:
/// Following callbacks are needed for this command: OnLockerStatusReceived, OnLockerStatusFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)GetLockerStatus SWIFT_WARN_UNUSED_RESULT;
/// Get a list of remote actions the SDK should execute.
/// important:
/// Following callbacks are needed for this command: OnRemoteActionsReceived, OnRemoteActionsFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)GetRemoteActions SWIFT_WARN_UNUSED_RESULT;
/// Executes remote actions .
/// important:
/// Following callbacks are coming from different Actions.
///
/// returns:
/// true if request is accepted.
- (BOOL)ExecuteRemoteActions:(RemoteActionsModel * _Nonnull)remoteAction SWIFT_WARN_UNUSED_RESULT;
/// If the current locker is referenced in the SDK as a new one, it can be registered within the backend and initialized.
/// important:
/// Following callbacks are needed for this command: OnInitFinished, OnInitFailed, OnInitUpdate
/// \param lockerId is the lockerId that the new initialized locker should get (cannot be changed anymore).
///
/// \param locker Is the KepolLockerModel with all necessary information of the locker
///
///
/// returns:
/// true if request is accepted.
- (BOOL)InitNewLocker:(NSString * _Nonnull)lockerId :(KepolLockerModel * _Nonnull)locker SWIFT_WARN_UNUSED_RESULT;
/// Sets or generates a new public key for enrypted communication.
/// important:
/// Following callbacks are needed for this command: OnPublicKeySet, OnPublicKeySetFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)SetPublicKey SWIFT_WARN_UNUSED_RESULT;
/// Start a logfile sync action.
/// All log files that are stored on the locker but not yet stored on the backend will be uploaded to the backend sequentially.
/// Depending on the number of files and their size this can take a while.
/// This action runs in the background but blocks all other calls to the locker. Therefore this action can be aborted.
/// The progress will not get lost on abort and a new sync can be triggered again. Additionally this action sends updates on the status (OnLogFileSyncUpdata).
/// important:
/// Following callbacks are needed for this command: OnLogFileSyncUpdate, OnLogFileSyncFailed
///
/// returns:
/// true if request is accepted.
- (BOOL)SyncLogFiles SWIFT_WARN_UNUSED_RESULT;
/// Tries to abort current running Action
///
/// returns:
/// true if request is accepted.
- (BOOL)AbortCurrentAction SWIFT_WARN_UNUSED_RESULT;
/// Delets Connected Locker from Backend. Locker will no longer will be able to Communicate with Backend.
/// - important: Following callbacks are needed for this command: OnLockerDeleted, OnDeleteFailed
/// - returns: True if request is accepted
- (BOOL)DeleteLocker SWIFT_WARN_UNUSED_RESULT;
/// Get components for locker from backend
/// important:
/// Following callbacks are needed for this command: OnGetLockerComponentsReceived, OnGetLockerComponentsFailed
- (BOOL)GetLockerComponents SWIFT_WARN_UNUSED_RESULT;
/// Get all available components from backend
/// important:
/// Following callbacks are needed for this command: OnGetAllComponentsReceived, OnGetAllComponentsFailed
- (BOOL)GetAllComponents SWIFT_WARN_UNUSED_RESULT;
/// Get all available features from backend
/// important:
/// Following callbacks are needed for this command: OnGetAllFeaturesReceived, OnGetAllFeaturesFailed
- (BOOL)GetAllFeatures SWIFT_WARN_UNUSED_RESULT;
/// Set components for locker
/// important:
/// Following callbacks are needed for this command: OnSetLockerComponentsSuccess OnSetLockerComponentsFailed
- (BOOL)SetLockerComponents:(NSArray<NSString *> * _Nonnull)componentIds SWIFT_WARN_UNUSED_RESULT;
/// Get features for locker from backend
/// important:
/// Following callbacks are needed for this command: OnGetLockerFeaturesReceived, OnGetLockerFeaturesFailed
- (BOOL)GetLockerFeatures SWIFT_WARN_UNUSED_RESULT;
/// Getting the locker status failed.
/// <ul>
///   <li>
///     Parameters:
///     - String: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnLockerStatusFailed)(ProblemDetails * _Nonnull);
/// Getting the locker status
/// <ul>
///   <li>
///     Parameters: Array of LockerPropertyModel
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnLockerStatusReceived)(NSArray<LockerPropertyModel *> * _Nonnull);
/// Getting a list of remote actions which should be executed
/// <ul>
///   <li>
///     Parameters:
///     - [String]
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnRemoteActionsReceived)(NSArray<RemoteActionsModel *> * _Nonnull);
/// Process of getting remote actions failed (Errormessage)
/// <ul>
///   <li>
///     Parameters:
///     - String
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnRemoteActionsFailed)(ProblemDetails * _Nonnull);
/// Process of setting public key successfully finished.
/// <ul>
///   <li>
///     Parameters:
///     - FeedbackModel
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnPublicKeySet)(FeedbackModel * _Nonnull);
/// Process of setting public key failed (Errormessage)
/// <ul>
///   <li>
///     Parameters:
///     - String
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnPublicKeySetFailed)(ProblemDetails * _Nonnull);
/// Successfully finished the complete initNewLockerProcess. The next step could be starting a normal connection to the locker.
@property (nonatomic, copy) void (^ _Nullable OnInitFinished)(void);
/// Update information from the Init process.
@property (nonatomic, copy) void (^ _Nullable OnInitUpdate)(NSString * _Nonnull);
/// At least one step during the process of initialization failed. No more callbacks will be received - InitNewLocker process aborted.
/// A second execution of the init session task (IKepololserviceAPI.InitNewLocker(lockerId: String, locker: KepolLockerModel)) also fails. Normal connect should be able to be established.
@property (nonatomic, copy) void (^ _Nullable OnInitFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerInfoFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerInfoReceived)(KepolLockerModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfoFailed)(ProblemDetails * _Nonnull) SWIFT_DEPRECATED_MSG("Callback will be deleted in upcoming Release; Use new func onModuleVersionInfosFailed");
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfoReceived)(VersionInfoModel * _Nonnull) SWIFT_DEPRECATED_MSG("Callback will be deleted in upcoming Release; Use new Callback onModuleVersionInfosReceived");
/// Successfully retrieved all Versioninfos from Modules built in Locker
/// <ul>
///   <li>
///     returns LockerModuleVersionInfosModel
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfosReceived)(LockerModuleVersionInfosModel * _Nonnull);
/// Is called when something went wrong while retrievieng Versioninfos
///
/// returns:
/// ProblemDetails
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfosFailed)(ProblemDetails * _Nonnull);
/// At least one step during the process of initialization failed. No more callbacks will be received - InitNewLocker process aborted.
/// A second execution of the init session task (IKepololserviceAPI.InitNewLocker(lockerId: String, locker: KepolLockerModel)) also fails. Normal connect should be able to be established.
@property (nonatomic, copy) void (^ _Nullable OnLogFileSyncFailed)(ProblemDetails * _Nonnull);
/// At least one step during the process of initialization failed. No more callbacks will be received - InitNewLocker process aborted.
/// A second execution of the init session task (IKepololserviceAPI.InitNewLocker(lockerId: String, locker: KepolLockerModel)) also fails. Normal connect should be able to be established.
@property (nonatomic, copy) void (^ _Nullable OnLogFileSyncUpdate)(LogFileSyncUpdate * _Nonnull);
/// Callback that an Action was aborted.
/// <ul>
///   <li>
///     Parameters: name of action
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnActionAborted)(NSString * _Nonnull);
/// Callback to notify if delete of locker from backend failed*
@property (nonatomic, copy) void (^ _Nullable OnDeleteFailed)(ProblemDetails * _Nonnull);
/// Callback to notify that locker was successfully deleted from backend
@property (nonatomic, copy) void (^ _Nullable OnLockerDeleted)(void);
/// Get All Components failed
/// <ul>
///   <li>
///     Parameters:
///     - actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetAllComponentsFailed)(ProblemDetails * _Nonnull);
/// Getting a list of all available components
/// <ul>
///   <li>
///     Parameters:
///     -  [LockerComponentsModel]
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetAllComponentsReceived)(LockerComponentsModel * _Nonnull);
/// Get All Features failed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetAllFeaturesFailed)(ProblemDetails * _Nonnull);
/// Getting a list of all available features
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     [LockerFeaturesModel]
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetAllFeaturesReceived)(LockerFeaturesModel * _Nonnull);
/// Get All Components failed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetLockerComponentsFailed)(ProblemDetails * _Nonnull);
/// Getting a list of locker components
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     [LockerComponentsModel]
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetLockerComponentsReceived)(LockerComponentsModel * _Nonnull);
/// Set Locker Components failed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetLockerComponentsFailed)(ProblemDetails * _Nonnull);
/// Getting a list of setted component ids
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     [String]
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnSetLockerComponentsSuccess)(void);
/// Get Locker Features failed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     actionFailed: Errormessage
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetLockerFeaturesFailed)(ProblemDetails * _Nonnull);
/// Getting a list of locker features
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     [LockerComponentsModel]
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable OnGetLockerFeaturesReceived)(LockerFeaturesModel * _Nonnull);
@end


/// Error Code provided by KePol App backend.
/// In many cases the http status code and error description does not included enough information
/// to give the user proper information how to handle the situation.
/// A {@link ActionFailed#getException()}  might include an additional error code.
/// The error code can be fetched easily using {@link KePolAppErrorCode#getKePolAppErrorCode(Exception)}.
/// <p>
/// ErrorCode includes a very basic message.
/// Provide a custom message in case the user should get a more detailed description.
SWIFT_CLASS("_TtC8KepolSdk17KepolAppErrorCode")
@interface KepolAppErrorCode : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, ErrorCode, open) {
  ErrorCodeFAILED = 0,
  ErrorCodePRODUCT_CODE_UNKNOWN = 1,
  ErrorCodeLOCKER_UNKNOWN = 2,
  ErrorCodeSTAMP_TYPE_MISSING = 3,
  ErrorCodeANNOUNCEMENT_NOT_FOUND = 4,
  ErrorCodeFAILED_TO_MAP_BOX = 5,
  ErrorCodeFAILED_TO_MAP_PARCEL = 6,
  ErrorCodeFAILED_TO_MAP_ANNOUNCEMENT = 7,
  ErrorCodeFAILED_TO_MAP_LABEL = 8,
  ErrorCodePARCEL_NOT_FOUND = 9,
  ErrorCodeIDENTCODE_ALREADY_USED = 10,
  ErrorCodeLOCKER_IS_FULL = 11,
  ErrorCodeBOXCOMMAND_REJECTED = 12,
  ErrorCodeWRONG_MACHINE = 13,
  ErrorCodeLOGISTICIAN_UNKNOWN = 14,
  ErrorCodeMISSING_INPUT_PARAMETER = 15,
  ErrorCodePARCEL_STOPPED = 16,
  ErrorCodePARCEL_REDIRECTED = 17,
  ErrorCodePARCEL_PICKED_UP_BY_DELIVERY = 18,
  ErrorCodePICKUP_REJECTED = 19,
  ErrorCodeUSER_UNKNOWN = 20,
  ErrorCodeBOX_SOILED_REJECTED = 21,
  ErrorCodeBOX_DEFECT_REJECTED = 22,
  ErrorCodeINTERNAL_ERROR = 23,
  ErrorCodeNONE = 24,
};


SWIFT_CLASS_NAMED("KepolLockerLED")
@interface KepolLockerLED : NSObject
/// Turn the locker LED on to clearly identify the locker. This will take some time as a BT-connection must be stablished. This will only work with not yet initialized lockers.
/// \param locker Is the KepolLockerModel with all necessary information of the locker
///
+ (void)turnOn:(KepolLockerModel * _Nonnull)locker;
/// Turn the locker LED off.
/// \param locker Is the KepolLockerModel with all necessary information of the locker
///
+ (void)turnOff:(KepolLockerModel * _Nonnull)locker;
/// Turn all LEDs off
+ (void)turnAllOff;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Representation of a KePol locker.
SWIFT_CLASS("_TtC8KepolSdk16KepolLockerModel")
@interface KepolLockerModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Locker-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull LockerId;
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Firmwareversion
@property (nonatomic, readonly, copy) NSString * _Nonnull FirmwareVersion;
/// Protocolversion
@property (nonatomic, readonly, copy) NSString * _Nonnull ProtocolVersion;
/// Array of FirmwareModels
@property (nonatomic, readonly, copy) NSArray<FirmwareModel *> * _Nonnull FirmwareModels;
/// Array of LockerPropertyModels
@property (nonatomic, readonly, copy) NSArray<LockerPropertyModel *> * _Nonnull LockerProperties;
/// Array of RemoteActions
@property (nonatomic, readonly, copy) NSArray<RemoteActionsModel *> * _Nonnull RemoteActions;
/// If locker is already initialized.
///
/// returns:
/// true if the locker was already registered at the backend
@property (nonatomic, readonly) BOOL IsInitialized;
/// If locker is ready to be connected to a new device
///
/// returns:
/// true, if the locker is available and ready for new connection
@property (nonatomic, readonly) BOOL isConnectable;
@end

typedef SWIFT_ENUM(int32_t, Feature, open) {
/// Pickup Code feature supports pickup of parcel using
/// an HMI installed at the locker.
  FeaturePICKUP_CODE = 0,
};


/// Model of KepolParameters
SWIFT_CLASS("_TtC8KepolSdk15KepolParameters")
@interface KepolParameters : NSObject
- (nonnull instancetype)init:(NSDictionary<NSString *, NSString *> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Parameters dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull Parameters;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KepolUser;

/// Model of KepolRegisteredAgent
SWIFT_CLASS("_TtC8KepolSdk20KepolRegisteredAgent")
@interface KepolRegisteredAgent : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)accessToken :(NSString * _Nonnull)refreshToken :(KepolUser * _Nonnull)user OBJC_DESIGNATED_INITIALIZER;
/// AccessToken
@property (nonatomic, copy) NSString * _Nonnull AccessToken;
/// RefreshToken
@property (nonatomic, copy) NSString * _Nonnull RefreshToken;
/// ExpiredTime
@property (nonatomic) int64_t ExpiredTime SWIFT_DEPRECATED_MSG("ExpiredTime is deprecated, use AccessTokenExpirationTime and RefreshTokenExpirationTime");
/// RefreshTokenExpirationTime
@property (nonatomic) int64_t RefreshTokenExpirationTime;
/// RefreshTokenExpirationTime
@property (nonatomic) int64_t AccessTokenExpirationTime;
/// KepolUser
@property (nonatomic, readonly, strong) KepolUser * _Nonnull User;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("KepolSdk")
@interface KepolSdk : NSObject <IKepolDeliveryPickupAPI, IKepolServiceAPI>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nullable OnKepolLockerSearchFound)(NSArray<KepolLockerModel *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnBoxesStatusReceived)(NSArray<BoxStatusModel *> * _Nonnull, BOOL);
@property (nonatomic, copy) void (^ _Nullable OnBoxesStatusFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnConnectionEstablished)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnConnectionClosed)(NSInteger);
@property (nonatomic, copy) void (^ _Nullable OnConnectionClosedFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnConnectionEstablishedFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnKepolLockerSearchFinished)(NSArray<KepolLockerModel *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnBoxOpenedFinished)(OpenBoxesModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnInitFinished)(void);
@property (nonatomic, copy) void (^ _Nullable OnInitUpdate)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnInitFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnBoxOpenedFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnKepolLockerSearchFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerStatusFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerStatusReceived)(NSArray<LockerPropertyModel *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnRemoteActionsReceived)(NSArray<RemoteActionsModel *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnRemoteActionsFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetAllComponentsReceived)(LockerComponentsModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetAllComponentsFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetAllFeaturesReceived)(LockerFeaturesModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetAllFeaturesFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetLockerComponentsFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetLockerComponentsReceived)(LockerComponentsModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSetLockerComponentsFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSetLockerComponentsSuccess)(void);
@property (nonatomic, copy) void (^ _Nullable OnGetLockerFeaturesFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetLockerFeaturesReceived)(LockerFeaturesModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPublicKeySet)(FeedbackModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPublicKeySetFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerInfoFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerInfoReceived)(KepolLockerModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfoFailed)(ProblemDetails * _Nonnull) SWIFT_DEPRECATED_MSG("Callback will be deleted in upcoming Release; Use new func onModuleVersionInfosFailed");
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfoReceived)(VersionInfoModel * _Nonnull) SWIFT_DEPRECATED_MSG("Callback will be deleted in upcoming Release; Use new Callback onModuleVersionInfosReceived");
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfosReceived)(LockerModuleVersionInfosModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnModuleVersionInfosFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnTokenReceived)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnTokenFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnTokenWithPrivilegesReceived)(KepolRegisteredAgent * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnTokenWithPrivilegesFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnAvailableBoxSizesFinished)(BoxSizeModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnAvailableBoxSizesFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnDeliveryParcelFinished)(DeliveryModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnDeliveryParcelFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelSuccess)(PickupParcelModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPingFailed)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnRunningTimeoutSoon)(void);
@property (nonatomic, copy) void (^ _Nullable OnLogFileSyncFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLogFileSyncUpdate)(LogFileSyncUpdate * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnActionAborted)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnDeleteFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnLockerDeleted)(void);
@property (nonatomic, copy) void (^ _Nullable OnAvailablePickupsFinished)(NSArray<AvailablePickupParcelModel *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnAvailablePickupsFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelsSuccess)(NSArray<AvailablePickupParcelModel *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnPickupParcelsFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnConnectionClosedBle)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnConfirmDeliveryFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnConfirmDeliverySuccess)(NSString * _Nonnull, NSInteger);
@property (nonatomic, copy) void (^ _Nullable OnConfirmPickupSuccess)(NSString * _Nonnull, NSInteger);
@property (nonatomic, copy) void (^ _Nullable OnConfirmPickupFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSetBoxConditionSuccess)(NSInteger, BOOL, BOOL);
@property (nonatomic, copy) void (^ _Nullable OnSetBoxConditionFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesSuccess)(SetPickupCodeResponseModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnClearPickupCodesSuccess)(ClearPickupCodeResponseModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnClearPickupCodesFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetPickupCodesStatusSuccess)(StatusPickupCodeResponseModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnGetPickupCodesStatusFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesWithIdentCodeSuccess)(void);
@property (nonatomic, copy) void (^ _Nullable OnSetPickupCodesWithIdentCodeFailed)(ProblemDetails * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable OnSyncPickupCodesSuccess)(void);
@property (nonatomic, copy) void (^ _Nullable OnSyncPickupCodesFailed)(ProblemDetails * _Nonnull);
+ (id <IKepolServiceAPI> _Nonnull)GetKepolServiceAPI:(BackendConfig * _Nonnull)backendConfig SWIFT_WARN_UNUSED_RESULT;
+ (id <IKepolApi> _Nonnull)GetKepolAPI:(BackendConfig * _Nonnull)backendConfig SWIFT_WARN_UNUSED_RESULT;
+ (id <IKepolDeliveryPickupAPI> _Nonnull)GetKepolDeliveryAPI:(BackendConfig * _Nonnull)backendConfig SWIFT_WARN_UNUSED_RESULT;
- (void)SetToken:(NSString * _Nonnull)token;
- (void)UpdateToken:(NSString * _Nonnull)accessToken;
- (void)SetTenantId:(NSString * _Nonnull)tenantId;
- (NSString * _Nonnull)CheckBluetoothEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)FindLocker:(uint32_t)DurationSec SWIFT_WARN_UNUSED_RESULT;
- (void)StopSearch;
- (BOOL)Connect:(KepolLockerModel * _Nonnull)kepolLocker SWIFT_WARN_UNUSED_RESULT;
- (BOOL)IsConnected SWIFT_WARN_UNUSED_RESULT;
- (BOOL)Disconnect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)OpenBoxes:(NSArray<NSNumber *> * _Nonnull)boxNumbers SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetBoxesStatus SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetLockerStatus SWIFT_WARN_UNUSED_RESULT;
- (BOOL)InitNewLocker:(NSString * _Nonnull)lockerId :(KepolLockerModel * _Nonnull)locker SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetRemoteActions SWIFT_WARN_UNUSED_RESULT;
- (BOOL)ExecuteRemoteActions:(RemoteActionsModel * _Nonnull)remoteAction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)SetPublicKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetAllComponents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetAllFeatures SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetLockerComponents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)SetLockerComponents:(NSArray<NSString *> * _Nonnull)componentIds SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetLockerFeatures SWIFT_WARN_UNUSED_RESULT;
/// Get version of iOS SDK.
///
/// returns:
/// Version of SDK
+ (NSString * _Nonnull)GetVersion SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetDeliveryToken:(NSString * _Nonnull)lockerId :(NSString * _Nonnull)tenantId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetDeliveryToken:(NSString * _Nonnull)tenantId :(NSString * _Nonnull)userName :(NSString * _Nonnull)pin SWIFT_WARN_UNUSED_RESULT;
- (BOOL)RefreshDeliveryToken:(KepolRegisteredAgent * _Nonnull)agent SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetAvailableBoxSizes:(NSString * _Nonnull)identCode SWIFT_WARN_UNUSED_RESULT;
- (BOOL)DeliverParcel:(NSString * _Nonnull)identCode :(NSString * _Nonnull)size SWIFT_WARN_UNUSED_RESULT;
- (void)SetBoxCondition:(NSString * _Nonnull)identCode :(NSInteger)boxNumber :(BOOL)soiled :(BOOL)defect;
- (void)ConfirmDelivery:(NSString * _Nonnull)identCode :(NSInteger)boxId;
- (void)ConfirmDelivery:(NSString * _Nonnull)identCode :(NSInteger)boxId :(BOOL)pickupCodeSet;
- (BOOL)GetPickupToken:(NSString * _Nonnull)lockerId :(NSString * _Nonnull)tenantId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)PickupParcel:(NSString * _Nonnull)pickupCode SWIFT_WARN_UNUSED_RESULT;
- (void)ConfirmPickupParcel:(NSString * _Nonnull)pickupCode :(NSInteger)boxNumber;
- (void)ConfirmPickupParcel:(AvailablePickupParcelModel * _Nonnull)parcel;
- (BOOL)GetAvailablePickups SWIFT_WARN_UNUSED_RESULT;
- (BOOL)PickupParcels:(NSArray<AvailablePickupParcelModel *> * _Nonnull)parcels SWIFT_WARN_UNUSED_RESULT;
- (BOOL)DeliverParcelFirstMile:(NSString * _Nonnull)parcelReturnCode :(NSString * _Nonnull)size SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetAvailableBoxSizesFirstMile:(NSString * _Nonnull)parcelReturnCode SWIFT_WARN_UNUSED_RESULT;
- (void)ConfirmDeliveryFirstMile:(NSString * _Nonnull)parcelReturnCode :(NSInteger)boxId;
- (void)ConfirmDeliveryFirstMile:(NSString * _Nonnull)parcelReturnCode :(NSInteger)boxId :(KepolParameters * _Nonnull)parameters;
- (BOOL)SyncLogFiles SWIFT_WARN_UNUSED_RESULT;
- (BOOL)AbortCurrentAction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetLockerInfo SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetVersionInfo:(FirmwareModel * _Nonnull)fwModel SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Callback will be deleted in upcoming Release; Use new func GetAllModulesVersionInfo");
- (BOOL)GetAllModulesVersionInfo SWIFT_WARN_UNUSED_RESULT;
- (BOOL)Ping SWIFT_WARN_UNUSED_RESULT;
- (BOOL)DeleteLocker SWIFT_WARN_UNUSED_RESULT;
- (BOOL)IsPickupCodeFeatureSupported SWIFT_WARN_UNUSED_RESULT;
- (BOOL)SetPickupCodes:(NSArray<SetPickupCodeModel *> * _Nonnull)pickupCodes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)ClearPickupCodes:(NSArray<NSNumber *> * _Nonnull)boxNumbers SWIFT_WARN_UNUSED_RESULT;
- (BOOL)ClearAllPickupCodes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetPickupCodeStatus:(NSArray<NSNumber *> * _Nonnull)boxNumbers SWIFT_WARN_UNUSED_RESULT;
- (BOOL)GetPickupCodeStatus:(NSArray<NSNumber *> * _Nonnull)boxNumbers :(enum PickupCodeStatus)filter SWIFT_WARN_UNUSED_RESULT;
- (BOOL)SetPickupCodesWithIdentCode:(NSArray<SetPickupCodeWithIdentCodeModel *> * _Nonnull)setPickupCodeWithIdentCodeData SWIFT_WARN_UNUSED_RESULT;
- (BOOL)SyncPickupCodes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)ConfirmDeliveryAndSetPickupCode:(NSString * _Nonnull)identCode :(NSInteger)boxId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8KepolSdk9KepolUser")
@interface KepolUser : NSObject
/// UserId
@property (nonatomic, readonly, copy) NSString * _Nonnull UserId;
/// Privileges
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull Privileges;
/// Gender
@property (nonatomic, readonly, copy) NSString * _Nonnull Gender;
/// LastName
@property (nonatomic, readonly, copy) NSString * _Nonnull LastName;
/// FirstName
@property (nonatomic, readonly, copy) NSString * _Nonnull FirstName;
/// EMail
@property (nonatomic, readonly, copy) NSString * _Nonnull EMail;
/// AllowAllMachines
@property (nonatomic, readonly) BOOL AllowAllMachines;
/// AllowedMachines
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull AllowedMachines;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of Component
SWIFT_CLASS("_TtC8KepolSdk20LockerComponentModel")
@interface LockerComponentModel : NSObject
/// Id
@property (nonatomic, readonly, copy) NSString * _Nonnull Id;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull Name;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull Description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of Components
SWIFT_CLASS("_TtC8KepolSdk21LockerComponentsModel")
@interface LockerComponentsModel : NSObject
/// Components
@property (nonatomic, readonly, copy) NSArray<LockerComponentModel *> * _Nonnull Components;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of Feature
SWIFT_CLASS("_TtC8KepolSdk18LockerFeatureModel")
@interface LockerFeatureModel : NSObject
/// Id
@property (nonatomic, readonly, copy) NSString * _Nonnull Id;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull Name;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull Description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of Features
SWIFT_CLASS("_TtC8KepolSdk19LockerFeaturesModel")
@interface LockerFeaturesModel : NSObject
/// Components
@property (nonatomic, readonly, copy) NSArray<LockerFeatureModel *> * _Nonnull Features;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing LockerModuleInfo
SWIFT_CLASS("_TtC8KepolSdk16LockerModuleInfo")
@interface LockerModuleInfo : NSObject
/// Device Identifier
@property (nonatomic, readonly) NSInteger DeviceId;
/// Device Short Name
@property (nonatomic, readonly, copy) NSString * _Nonnull DeviceShortName;
/// Module Type Identifier
@property (nonatomic, readonly) NSInteger TypeId;
/// Module Type Short Name
@property (nonatomic, readonly, copy) NSString * _Nonnull TypeShortName;
/// Position in List
@property (nonatomic, readonly, copy) NSString * _Nonnull Position;
/// Module Version
@property (nonatomic, readonly, copy) NSString * _Nonnull Version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model Representing LockerModuleVersionInfos
SWIFT_CLASS("_TtC8KepolSdk29LockerModuleVersionInfosModel")
@interface LockerModuleVersionInfosModel : NSObject
/// ModuleVersionInfos : contains a list of all versions from modules that are built in locker
@property (nonatomic, readonly, copy) NSArray<LockerModuleInfo *> * _Nonnull ModuleVersionInfos;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum LockerPropertyType : int32_t;
enum LockerPropertyStatus : int32_t;

/// Generic property for Kepol Cloud.
/// Property can be used for:
/// <ul>
///   <li>
///     read property values.
///   </li>
///   <li>
///     set property values.
///   </li>
///   <li>
///     show read only values like status.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8KepolSdk19LockerPropertyModel")
@interface LockerPropertyModel : NSObject
/// Unique Id of an property.
@property (nonatomic, readonly, copy) NSString * _Nonnull Id;
/// All different kind of data type are mapped to string.
@property (nonatomic, readonly, copy) NSString * _Nonnull Value;
/// Data in ‘Value’ can be one of these types.
@property (nonatomic, readonly) enum LockerPropertyType ValueType;
/// Defines the status-context of this property.
@property (nonatomic, readonly) enum LockerPropertyStatus Status;
/// Unit property.
@property (nonatomic, readonly, copy) NSString * _Nonnull Unit;
/// Last updated property.
@property (nonatomic, readonly, copy) NSString * _Nonnull LastUpdated;
/// Another possibility to add structure to a collection of LockerProperty. Group might be translated in the localization file - in case it’s not - the group should be of human readable format.
@property (nonatomic, readonly, copy) NSString * _Nonnull Group;
/// Yet another possibility to add structure to a collection of LockerPropterty.
@property (nonatomic, readonly) int32_t Order;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, LockerPropertyType, open) {
  LockerPropertyTypeBOOLEAN = 0,
  LockerPropertyTypeNUMERIC = 1,
  LockerPropertyTypeSTRING = 2,
};

typedef SWIFT_ENUM(int32_t, LockerPropertyStatus, open) {
  LockerPropertyStatusNEUTRAL = 0,
  LockerPropertyStatusOK = 1,
  LockerPropertyStatusWARNING = 2,
  LockerPropertyStatusERROR = 3,
};


/// Model representing the LogFileContent.
SWIFT_CLASS("_TtC8KepolSdk19LogFileContentModel")
@interface LogFileContentModel : NSObject
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Type of response
@property (nonatomic, readonly, copy) NSString * _Nonnull ResponseType;
/// Log content
@property (nonatomic, readonly, copy) NSString * _Nonnull Log;
/// Timestamp
@property (nonatomic, readonly) int64_t Timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of LogFileSyncUpdate
SWIFT_CLASS("_TtC8KepolSdk17LogFileSyncUpdate")
@interface LogFileSyncUpdate : NSObject
/// LogFilesCount
@property (nonatomic, readonly) NSInteger LogFilesCount;
/// LogFilesUploaded
@property (nonatomic, readonly) NSInteger LogFilesUploaded;
/// SizeUploaded
@property (nonatomic, readonly) int64_t SizeUploaded;
/// SizeAverageUploaded
@property (nonatomic, readonly) int64_t SizeAverageUploaded;
/// Finished
@property (nonatomic, readonly) BOOL Finished;
/// Aborted
@property (nonatomic, readonly) BOOL Aborted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the LogFilesInfo.
SWIFT_CLASS("_TtC8KepolSdk17LogFilesInfoModel")
@interface LogFilesInfoModel : NSObject
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Type of response
@property (nonatomic, readonly, copy) NSString * _Nonnull ResponseType;
/// OldestLogFileId
@property (nonatomic, readonly) int32_t OldestLogFileId;
/// LatestLogFileId
@property (nonatomic, readonly) int32_t LatestLogFileId;
/// LogFilesMissingOnBackend
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull LogFilesMissingOnBackend;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, MessageType, open) {
  MessageTypeUnknown = 0,
  MessageTypeInitSessionResponse = 1,
  MessageTypeOpenCompartmentsResponse = 2,
  MessageTypeBoxStatusChangedResponse = 3,
  MessageTypeVersionInfoResponse = 4,
  MessageTypeLogFilesInfoResponse = 5,
  MessageTypeLogFileContentResponse = 6,
  MessageTypeBoxesStatusInfoResponse = 7,
  MessageTypeLogFileInfoResponse = 8,
  MessageTypeSetPublicKeyResponse = 9,
  MessageTypeLockerStatusInfoResponse = 10,
  MessageTypeLogLevelSetResponse = 11,
  MessageTypeVersionInfosResponse = 12,
  MessageTypeSetPickupCodeResponse = 13,
  MessageTypeClearPickupCodeResponse = 14,
  MessageTypeGetPickupCodeStatusResponse = 15,
};


/// Model of OpenBoxes
SWIFT_CLASS("_TtC8KepolSdk14OpenBoxesModel")
@interface OpenBoxesModel : NSObject
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Type of response
@property (nonatomic, readonly, copy) NSString * _Nonnull ResponseType;
/// Array of Ids which boxes are opened
@property (nonatomic, readonly, copy) NSArray<BoxStatusModel *> * _Nonnull OpenedBoxes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, Parameter, open) {
  ParameterEMAIL = 0,
  ParameterUNKNOWN = 1,
};

enum PickupCodeFeedback : int32_t;

/// Model representing the PickupCodeFeedbackModel.
SWIFT_CLASS("_TtC8KepolSdk23PickupCodeFeedbackModel")
@interface PickupCodeFeedbackModel : NSObject
/// BoxNumber
@property (nonatomic, readonly) int32_t BoxNumber;
/// Result
@property (nonatomic, readonly) enum PickupCodeFeedback Result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// PickupCodeFeedback
typedef SWIFT_ENUM(int32_t, PickupCodeFeedback, open) {
  PickupCodeFeedbackSUCCESS = 0,
  PickupCodeFeedbackDIFFERENT_CODE_ALREADY_SET = 1,
  PickupCodeFeedbackCODE_TOO_SHORT = 2,
  PickupCodeFeedbackCODE_TO_LONG = 3,
  PickupCodeFeedbackINVALID_CODE_CHARACTERS = 4,
  PickupCodeFeedbackCOMPARTMENT_NUMBER_INVALID = 5,
  PickupCodeFeedbackFAILED = 6,
};


/// Model of PickupParcel
SWIFT_CLASS("_TtC8KepolSdk17PickupParcelModel")
@interface PickupParcelModel : NSObject
/// IdentCode
@property (nonatomic, readonly, copy) NSString * _Nonnull PickupCode;
/// BoxNumber
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull Boxes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the PickupParcelsModel.
SWIFT_CLASS("_TtC8KepolSdk18PickupParcelsModel")
@interface PickupParcelsModel : NSObject
/// ProcessedParcels
@property (nonatomic, readonly, copy) NSArray<AvailablePickupParcelModel *> * _Nonnull ProcessedParcels;
/// Payload
@property (nonatomic, readonly, copy) NSString * _Nonnull Payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model of Pickup Response
SWIFT_CLASS("_TtC8KepolSdk19PickupResponseModel")
@interface PickupResponseModel : NSObject
/// Boxes to open
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull BoxesToOpen;
/// Payload
@property (nonatomic, readonly, copy) NSString * _Nonnull Payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the ProblemDetails.
SWIFT_CLASS("_TtC8KepolSdk14ProblemDetails")
@interface ProblemDetails : NSObject
/// ResponseType
@property (nonatomic, readonly, copy) NSString * _Nonnull ResponseType;
/// Title
@property (nonatomic, readonly, copy) NSString * _Nonnull Title;
/// Status
@property (nonatomic, readonly) NSInteger Status;
/// Detail
@property (nonatomic, readonly, copy) NSString * _Nonnull Detail;
/// TraceId
@property (nonatomic, readonly, copy) NSString * _Nonnull TraceId;
/// ExtendedErrorCode
@property (nonatomic, readonly) enum ErrorCode ExtendedErrorCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the RemoteActions information of a locker
SWIFT_CLASS("_TtC8KepolSdk18RemoteActionsModel")
@interface RemoteActionsModel : NSObject
/// Action
@property (nonatomic, readonly, copy) NSString * _Nonnull Action;
/// Param
@property (nonatomic, readonly, copy) NSString * _Nonnull Input;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RestController class for RestApi calls
SWIFT_CLASS("_TtC8KepolSdk14RestController")
@interface RestController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the SetPickupCodeModel.
SWIFT_CLASS("_TtC8KepolSdk18SetPickupCodeModel")
@interface SetPickupCodeModel : NSObject
/// BoxNumber
@property (nonatomic, readonly) NSInteger BoxNumber;
/// PickupCode
@property (nonatomic, readonly, copy) NSString * _Nonnull PickupCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Rest API Response from locker - Model representing the SetPickupCodeResponseModel.
SWIFT_CLASS("_TtC8KepolSdk26SetPickupCodeResponseModel")
@interface SetPickupCodeResponseModel : NSObject
/// PickupCodeFeedbackModel
@property (nonatomic, readonly, copy) NSArray<PickupCodeFeedbackModel *> * _Nonnull Result;
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Enum of MessageType
@property (nonatomic, readonly) enum MessageType MessageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the SetPickupCodeWithIdentCodeModel.
SWIFT_CLASS("_TtC8KepolSdk31SetPickupCodeWithIdentCodeModel")
@interface SetPickupCodeWithIdentCodeModel : NSObject
/// BoxNumber
@property (nonatomic, readonly) NSInteger BoxNumber;
/// IdentCode
@property (nonatomic, readonly, copy) NSString * _Nonnull IdentCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model representing the StatusPickupCodeResponseModel (from GetPickupCodeStatusResponseModel)
SWIFT_CLASS("_TtC8KepolSdk29StatusPickupCodeResponseModel")
@interface StatusPickupCodeResponseModel : NSObject
/// PickupCodeFeedbackModel
@property (nonatomic, readonly, copy) NSArray<GetPickupCodeStatusBoxModel *> * _Nonnull Result;
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Enum of MessageType
@property (nonatomic, readonly) enum MessageType MessageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Representation of a VersionInfoModel  locker.
SWIFT_CLASS("_TtC8KepolSdk16VersionInfoModel")
@interface VersionInfoModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Hardware-Id
@property (nonatomic, readonly, copy) NSString * _Nonnull HardwareId;
/// Type of response
@property (nonatomic, readonly, copy) NSString * _Nonnull ResponseType;
/// Module-Id
@property (nonatomic, readonly) int32_t Module;
/// Module-Name
@property (nonatomic, readonly, copy) NSString * _Nonnull ModuleName;
/// BootloaderVersion
@property (nonatomic, readonly, copy) NSString * _Nonnull BootloaderVersion;
/// FirmwareVersion
@property (nonatomic, readonly, copy) NSString * _Nonnull FirmwareVersion;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
